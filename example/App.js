/**
 * Sample React Native App
 *
 * adapted from App.js generated by the following command:
 *
 * react-native init example
 *
 * https://github.com/facebook/react-native
 */

import React, {useState} from 'react';
import {
  Platform,
  StyleSheet,
  Text,
  View,
  ScrollView,
  TouchableOpacity,
} from 'react-native';
import WalletSdk from 'react-native-wallet-sdk';

export default () => {
  const [errors, setErrors] = useState('');
  const [mnemonic, setMnemonic] = useState('');
  const [seed, setSeed] = useState('');
  const [wallet, setWallet] = useState('');
  const [sNodeUrl, setSNodeUrl] = useState('');
  const [address, setAddress] = useState('');
  const [privateKey, setPrivateKey] = useState('');
  const [signResult, setSignResult] = useState('');
  const [txID, setTxID] = useState('');

  const TestEth = async () => {
    // const mnemonic =
    //   'distance maze layer winter day perfect sport toast flame square body explain chair magic simple page indicate december middle kite suffer spot civil chair';
    const password = '123456';

    try {
      const mnemonic = await WalletSdk.NewMnemonic(256);
      setMnemonic(`生成助记词--成功：${mnemonic}`);

      const sseed = await WalletSdk.NewSeed(mnemonic, password); // 通过助记词和密码口令生成钱包种子
      setSeed(`生成钱包种子--成功: ${sseed}`);

      const res = await WalletSdk.NewWallet(sseed);
      setWallet(`创建钱包--成功:${res}`);

      await WalletSdk.SetNodeUrl('eth', 'https://goerli.infura.io/v3/2595bb2d19014600baa03e51723f75e0');
      setSNodeUrl('钱包设置节点url--成功');

      const addr = await WalletSdk.DeriveAddress('eth', 1);
      setAddress(`推导地址--成功: ${addr}`);

      const privateKey = await WalletSdk.ExportAddressPrivateKey('eth', 1);
      setPrivateKey(`导出账户私钥--成功: ${privateKey}`);

      const signResult = await WalletSdk.Sign('eth', 1,JSON.stringify({
        To:       "0x2FA0b43f9e22CE9d77ef9DA09D71f3e64c4AA8Db",
        Amount:   0.5,
        GasPrice: 21,
        GasLimit: 21000,
        Nonce:    1,
      }));
      setSignResult(`签名后的数据: ${signResult}`);

      const txID = await WalletSdk.Broadcast('eth', signResult);
      setTxID(`钱包广播交易--成功: ${txID}`);

    } catch (err) {
      console.log('TestPay error:', err.toString());
      setErrors(`Pay Error: ${err.message}`);
    }
  };
  const TestFil = async () => {
    // const mnemonic =
    //   'distance maze layer winter day perfect sport toast flame square body explain chair magic simple page indicate december middle kite suffer spot civil chair';
    const password = '123456';

    try {
      const mnemonic = await WalletSdk.NewMnemonic(256);
      setMnemonic(`生成助记词--成功：${mnemonic}`);
      
      const sseed = await WalletSdk.NewSeed(mnemonic, password); // 通过助记词和密码口令生成钱包种子
      setSeed(`生成钱包种子--成功: ${sseed}`);

      await WalletSdk.NewWallet(sseed);
      setWallet(`创建钱包--成功:${wallet}`);

      await WalletSdk.SetHttpPublicKeysPath('filecoin', "/Users/zhangzhenyang/Downloads/PublicKey.pem");
      setAddress(`SetHttpPublicKeysPath--成功`);

      await WalletSdk.SetNodeUrl('filecoin', 'http://192.168.3.9:9876');
      setSNodeUrl('钱包设置节点url--成功');

      const addr = await WalletSdk.DeriveAddress('filecoin', 1);
      setAddress(`推导地址--成功: ${addr}`);

      const privateKey = await WalletSdk.ExportAddressPrivateKey('eth', 1);
      setPrivateKey(`导出账户私钥--成功: ${privateKey}`);

      const signResult = await WalletSdk.Sign('filecoin', 0,JSON.stringify({
        To:         "f1tapcyapyaq6icvqkceztm7wgte5pv7bnqibxz7q",
        Amount:     0.01,
        GasPrice:   1,
        GasLimit:   266363,
        GasPremium: 1,
        GasFeeCap:  1000,
      }));
      setSignResult(`签名后的数据: ${signResult}`);

      // const txID = await WalletSdk.Broadcast('filecoin', signResult);
      // setTxID(`钱包广播交易--成功: ${txID}`);

    } catch (err) {
      console.log('TestPay error:', err.toString());
      setErrors(`Pay Error: ${err.message}`);
    }
  };

  return (
    <View style={styles.container}>
      <ScrollView style={{flex: 1}}>
        <View style={styles.wrap}>
          <View style={styles.btnGroup}>
            <TouchableOpacity style={styles.btn} onPress={TestEth}>
              <Text style={styles.btn_text}>eth 测试</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.btn} onPress={TestFil}>
              <Text style={styles.btn_text}>filecoin 测试</Text>
            </TouchableOpacity>
          </View>

          <Text style={{marginVertical: 10, textAlign: 'center'}}>
            --测试结果--
          </Text>
          <Text style={styles.response}>{mnemonic}</Text>
          <Text style={styles.response}>{seed}</Text>
          <Text style={styles.response}>{wallet}</Text>
          <Text style={styles.response}>{sNodeUrl}</Text>
          <Text style={styles.response}>{address}</Text>
          <Text style={styles.response}>{privateKey}</Text>
          <Text style={styles.response}>{signResult}</Text>
          <Text style={styles.response}>{txID}</Text>

          <Text style={{marginVertical: 10, textAlign: 'center'}}>
            --错误信息--
          </Text>
          <Text style={styles.response}>{errors}</Text>
        </View>
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    paddingTop:40
  },
  wrap: {
    padding: 20,
  },
  btnGroup: {
    flexDirection:'row',
    alignItems:"center",
    justifyContent:"space-around",
    marginBottom: 10,
  },
  btn: {
    height: 46,
    flex:1,
    backgroundColor: '#0096fa',
    borderRadius: 10,
    alignItems: 'center',
    justifyContent: 'center',
    marginHorizontal:5
  },
  btn_text: {
    color: '#fff',
    fontSize: 18,
  },
  response: {
    marginBottom:10
  },
});
